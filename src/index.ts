// This file is generated by build/prebuild.
import array_isUnique from './array.is-unique'
import array_randomSwap from './array.random-swap'
import array_randomVector2 from './array.random-vector2'
import array_swap from './array.swap'
import bitKit_bigEndian_read from './bit-kit.big-endian.read'
import bitKit_bigEndian_write from './bit-kit.big-endian.write'
import bitKit_getBitLengthOfNumber from './bit-kit.get-bit-length-of-number'
import bitKit_getBits from './bit-kit.get-bits'
import bitKit_get from './bit-kit.get'
import bitKit_littleEndian_read from './bit-kit.little-endian.read'
import bitKit_littleEndian_write from './bit-kit.little-endian.write'
import bitKit_put from './bit-kit.put'
import bitKit_reverse from './bit-kit.reverse'
import bitKit_setBits from './bit-kit.set-bits'
import compress_huffman_buildTable from './compress.huffman.build-table'
import compress_huffman_buildTrieFromTable from './compress.huffman.build-trie-from-table'
import compress_huffman_buildTrie from './compress.huffman.build-trie'
import compress_huffman_decode from './compress.huffman.decode'
import compress_huffman_encode from './compress.huffman.encode'
import compress_huffman_saveTable from './compress.huffman.save-table'
import graphic_randomScatter from './graphic.random-scatter'
import graphic_vector2Mapping from './graphic.vector2-mapping'
import math_pi from './math.pi'
import number_baseConvert from './number.base-convert'
import number_format_thousandsSep from './number.format.thousands-sep'
import number_randomRange from './number.random-range'
import other_angleConvert from './other.angle-convert'
import other_bmi from './other.bmi'
import other_getTypeName from './other.get-type-name'
import other_searchPatternCheck from './other.search-pattern-check'
import other_temperatureConvert from './other.temperature-convert'
import string_camelize from './string.camelize'
import string_hyphenate from './string.hyphenate'
import tree_flat from './tree.flat'
import validate_isEmpty from './validate.is-empty'
import worker_create from './worker.create'
import worker_thread from './worker.thread'

const Allbox = {
  array: {
    isUnique: array_isUnique,
    randomSwap: array_randomSwap,
    randomVector2: array_randomVector2,
    swap: array_swap,
  },
  bitKit: {
    bigEndian: {
      read: bitKit_bigEndian_read,
      write: bitKit_bigEndian_write,
    },
    getBitLengthOfNumber: bitKit_getBitLengthOfNumber,
    getBits: bitKit_getBits,
    get: bitKit_get,
    littleEndian: {
      read: bitKit_littleEndian_read,
      write: bitKit_littleEndian_write,
    },
    put: bitKit_put,
    reverse: bitKit_reverse,
    setBits: bitKit_setBits,
  },
  compress: {
    huffman: {
      buildTable: compress_huffman_buildTable,
      buildTrieFromTable: compress_huffman_buildTrieFromTable,
      buildTrie: compress_huffman_buildTrie,
      decode: compress_huffman_decode,
      encode: compress_huffman_encode,
      saveTable: compress_huffman_saveTable,
    },
  },
  graphic: {
    randomScatter: graphic_randomScatter,
    vector2Mapping: graphic_vector2Mapping,
  },
  math: {
    pi: math_pi,
  },
  number: {
    baseConvert: number_baseConvert,
    format: {
      thousandsSep: number_format_thousandsSep,
    },
    randomRange: number_randomRange,
  },
  other: {
    angleConvert: other_angleConvert,
    bmi: other_bmi,
    getTypeName: other_getTypeName,
    searchPatternCheck: other_searchPatternCheck,
    temperatureConvert: other_temperatureConvert,
  },
  string: {
    camelize: string_camelize,
    hyphenate: string_hyphenate,
  },
  tree: {
    flat: tree_flat,
  },
  validate: {
    isEmpty: validate_isEmpty,
  },
  worker: {
    create: worker_create,
    thread: worker_thread,
  },
}

export default Allbox
