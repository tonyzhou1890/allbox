import isUnique from './array.is-unique.js';
import randomSwap from './array.random-swap.js';
import randomVector2 from './array.random-vector2.js';
import swap from './array.swap.js';
import read from './bit-kit.big-endian.read.js';
import write from './bit-kit.big-endian.write.js';
import getBitLengthOfNumber from './bit-kit.get-bit-length-of-number.js';
import getBits from './bit-kit.get-bits.js';
import get from './bit-kit.get.js';
import read$1 from './bit-kit.little-endian.read.js';
import write$1 from './bit-kit.little-endian.write.js';
import put from './bit-kit.put.js';
import reverse from './bit-kit.reverse.js';
import setBits from './bit-kit.set-bits.js';
import getTypeName from './common.get-type-name.js';
import buildTable from './compress.huffman.build-table.js';
import buildTrieFromTable from './compress.huffman.build-trie-from-table.js';
import buildTrie from './compress.huffman.build-trie.js';
import decode from './compress.huffman.decode.js';
import encode from './compress.huffman.encode.js';
import saveTable from './compress.huffman.save-table.js';
import randomScatter from './graphic.random-scatter.js';
import vector2Mapping from './graphic.vector2-mapping.js';
import baseConvert from './number.base-convert.js';
import randomRange from './number.random-range.js';
import camelize from './string.camelize.js';
import { hyphenate } from './string.hyphenate.js';
import flat from './tree.flat.js';
import create from './worker.create.js';
import thread from './worker.thread.js';

// This file is generated by build/prebuild.
const Allbox = {
    array: {
        isUnique: isUnique,
        randomSwap: randomSwap,
        randomVector2: randomVector2,
        swap: swap,
    },
    bitKit: {
        bigEndian: {
            read: read,
            write: write,
        },
        getBitLengthOfNumber: getBitLengthOfNumber,
        getBits: getBits,
        get: get,
        littleEndian: {
            read: read$1,
            write: write$1,
        },
        put: put,
        reverse: reverse,
        setBits: setBits,
    },
    common: {
        getTypeName: getTypeName,
    },
    compress: {
        huffman: {
            buildTable: buildTable,
            buildTrieFromTable: buildTrieFromTable,
            buildTrie: buildTrie,
            decode: decode,
            encode: encode,
            saveTable: saveTable,
        },
    },
    graphic: {
        randomScatter: randomScatter,
        vector2Mapping: vector2Mapping,
    },
    number: {
        baseConvert: baseConvert,
        randomRange: randomRange,
    },
    string: {
        camelize: camelize,
        hyphenate: hyphenate,
    },
    tree: {
        flat: flat,
    },
    worker: {
        create: create,
        thread: thread,
    },
};

export { Allbox as default };
